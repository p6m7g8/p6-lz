#!/bin/sh

# shellcheck shell=bash

######################################################################
#<
#
# Function: p6_lz_main()
#
#  Environment:	 LC_ALL OPTIND SHELL TERM
#>
#/ Synopsis
#/    The entry point for bin/p6lzctl
#/
######################################################################
p6_lz_main() {

  # sanitize env
  LC_ALL=C
  unset SHELL
  unset TERM

  # load p6 framework
  local file=".deps/p6common/lib/_bootstrap.sh"
  . $file
  p6_bootstrap ".deps/p6common"
  p6_bootstrap ".deps/p6aws"

  # default options
  local flag_debug=0

  # parse options
  local flag
  while getopts "dD" flag; do
    case $flag in
    D) flag_debug=0 ;;
    d) flag_debug=1 ;;
    *) p6_lz_usage 1 "invalid flag" ;;
    esac
  done
  shift $((OPTIND - 1))

  # grab command
  local cmd="$1"
  shift 1

  # security 101: only allow valid comamnds
  case $cmd in
  boostrap) ;;
  build) ;;
  deploy) ;;
  destroy) ;;
  diff) ;;
  esac

  # setup -x based on flag_debug
  [ ${flag_debug} = 1 ] && set -x
  # exit if any cli errors w/ >0 return code
  # the commands can still disable locally if needed
  set -e
  p6_lz_cmd_"${cmd}" "$@"
  set +e
  [ ${flag_debug} = 1 ] && set +x

  return 0
}

p6_lz_cmd_build() {

  pnpm run build

  p6_return_void
}

######################################################################
#<
#
# Function: p6_lz_cmd_bootstrap()
#
#>
######################################################################
p6_lz_cmd_bootstrap() {

  p6_lz_run_bootstrap

  p6_return_void
}

######################################################################
#<
#
# Function: p6_lz_cmd_deploy()
#
#>
######################################################################
p6_lz_cmd_deploy() {

  p6_lz_run "build"
  p6_lz_run "deploy"

  p6_return_void
}

######################################################################
#<
#
# Function: p6_lz_cmd_diff()
#
#>
######################################################################
p6_lz_cmd_diff() {

  p6_lz_run "diff"

  p6_return_void
}

######################################################################
#<
#
# Function: p6_lz_cmd_destroy()
#
#  Environment:	 XXX
#>
######################################################################
p6_lz_cmd_destroy() {

  pnpm cdk destroy --all --force

  # XXX: Note Service Linked Roles can not be deleted
  # XXX: Organization/Accounts can not be deleted easily
  # XXX: Deleting Identity Access Center has implications like logging in or even subsequent action in this script
  # XXX: Deleting logarchive is not compliant in production setups
  # XXX: Custom Resources orphan the lambda cloud watch logs

  p6_return_void
}

######################################################################
#<
#
# Function: p6_lz_run(action)
#
#  Args:
#	action -
#
#  Environment:	 _3_ _4_
#>
######################################################################
p6_lz_run() {
  local action="$1"

  p6_lz_run_bootstrap "$action"

  p6_lz_run_phase_1 "$action"
  p6_lz_run_phase_2 "$action"
  p6_lz_run_phase_3_logarchive_account "$action"
  p6_lz_run_phase_3_audit_account "$action"
  p6_lz_run_phase_3_shared_account "$action"

  p6_lz_run_phase_4_prod_account "$action"

  p6_return_void
}

######################################################################
#<
#
# Function: p6_lz_run_bootstrap(action)
#
#  Args:
#	action -
#
#>
######################################################################
p6_lz_run_bootstrap() {
  local action="$1"

  if [ "$action" = "deploy" ]; then
    pnpm cdk bootstrap
  else
    echo pnpm cdk bootstrap
  fi
}

######################################################################
#<
#
# Function: p6_lz_run_phase_1(action)
#
#  Args:
#	action -
#
#>
######################################################################
p6_lz_run_phase_1() {
  local action="$1"

  pnpm cdk "$action" p6-lz-organization p6-lz-avm --require-approval never

  p6_return_void
}

######################################################################
#<
#
# Function: p6_lz_run_phase_2(action)
#
#  Args:
#	action -
#
#>
######################################################################
p6_lz_run_phase_2() {
  local action="$1"

  local mgmt_account_id=$(p6_lz_util_mgmt_account_id_get)
  local account_ids=$(p6_lz_util_account_ids_get "$mgmt_account_id")
  local account_id
  for account_id in ${account_ids}; do
    if [ "$action" = "deploy" ]; then
      p6_aws_svc_organizations_sts_su $account_id
      pnpm cdk bootstrap aws://$account_id/us-east-1 --trust $mgmt_account_id --trust-for-lookup $mgmt_account_id --cloudformation-execution-policies arn:aws:iam::aws:policy/AdministratorAccess
      p6_aws_svc_organizations_sts_su_un
    else
      echo pnpm cdk bootstrap aws://$account_id/us-east-1 --trust $mgmt_account_id --trust-for-lookup $mgmt_account_id --cloudformation-execution-policies arn:aws:iam::aws:policy/AdministratorAccess
    fi
  done

  p6_return_void
}

######################################################################
#<
#
# Function: p6_lz_run_phase_3_logarchive_account(action)
#
#  Args:
#	action -
#
#  Environment:	 _3_
#>
######################################################################
p6_lz_run_phase_3_logarchive_account() {
  local action="$1"

  local logarchive_account_id=$(p6_lz_util_logarchive_account_id_get)
  local organization_id=$(p6_lz_util_organization_id_get)
  pnpm cdk $action --context logarchiveAccountId=$logarchive_account_id --context organizationId=$organization_id p6-lz-logarchive --require-approval never

  p6_return_void
}

######################################################################
#<
#
# Function: p6_lz_run_phase_3_audit_account(action)
#
#  Args:
#	action -
#
#  Environment:	 _3_
#>
######################################################################
p6_lz_run_phase_3_audit_account() {
  local action="$1"

  local audit_account_id=$(p6_lz_util_audit_account_id_get)
  local logarchive_account_id=$(p6_lz_util_logarchive_account_id_get)

  if [ "$action" = "deploy" ]; then
    p6_aws_svc_organizations_sts_su $audit_account_id
    aws iam create-service-linked-role --aws-service-name "config.amazonaws.com" >/dev/null 2>&1 || true
    p6_aws_svc_organizations_sts_su_un
  fi

  pnpm cdk $action --context auditAccountId=$audit_account_id --context logarchiveAccountId=$logarchive_account_id p6-lz-audit --require-approval never

  p6_return_void
}

######################################################################
#<
#
# Function: p6_lz_run_phase_3_shared_account(action)
#
#  Args:
#	action -
#
#  Environment:	 _3_
#>
######################################################################
p6_lz_run_phase_3_shared_account() {
  local action="$1"

  local shared_account_id=$(p6_lz_util_shared_account_id_get)
  local logarchive_account_id=$(p6_lz_util_logarchive_account_id_get)

  pnpm cdk $action --context sharedAccountId=$shared_account_id --context logarchiveAccountId=$logarchive_account_id p6-lz-shared --require-approval never

  p6_return_void
}

######################################################################
#<
#
# Function: p6_lz_run_phase_4_prod_account(action)
#
#  Args:
#	action -
#
#  Environment:	 _4_
#>
######################################################################
p6_lz_run_phase_4_prod_account() {
  local action="$1"

  local prod_account_id=$(p6_lz_util_prod_account_id_get)
  pnpm cdk $action --context prodAccountId=$prod_account_id p6-lz-prod --require-approval never

  p6_return_void
}

######################################################################
#<
#
# Function: str account_ids = p6_lz_util_account_ids_get(mgmt_account_id)
#
#  Args:
#	mgmt_account_id -
#
#  Returns:
#	str - account_ids
#
#  Environment:	 ACTIVE
#>
######################################################################
p6_lz_util_account_ids_get() {
  local mgmt_account_id="$1"

  local account_ids=$(aws organizations list-accounts --query "Accounts[?Status=='ACTIVE'].Id" | jq -r ".[]" | grep -v "${mgmt_account_id}")

  p6_return_str "$account_ids"
}

######################################################################
#<
#
# Function: str account_id = p6_lz_util_mgmt_account_id_get()
#
#  Returns:
#	str - account_id
#
#>
######################################################################
p6_lz_util_mgmt_account_id_get() {

  local account_id=$(aws organizations describe-organization --query "Organization.MasterAccountId" --output text)

  p6_return_str "$account_id"
}

######################################################################
#<
#
# Function: str account_id = p6_lz_util_audit_account_id_get()
#
#  Returns:
#	str - account_id
#
#  Environment:	 ACTIVE
#>
######################################################################
p6_lz_util_audit_account_id_get() {

  local account_id=$(aws organizations list-accounts --query "Accounts[?Status=='ACTIVE' && Name=='p6m7g8-audit'].Id" --output text)

  p6_return_str "$account_id"
}

######################################################################
#<
#
# Function: str account_id = p6_lz_util_logarchive_account_id_get()
#
#  Returns:
#	str - account_id
#
#  Environment:	 ACTIVE
#>
######################################################################
p6_lz_util_logarchive_account_id_get() {

  local account_id=$(aws organizations list-accounts --query "Accounts[?Status=='ACTIVE' && Name=='p6m7g8-logarchive'].Id" --output text)

  p6_return_str "$account_id"
}

######################################################################
#<
#
# Function: str account_id = p6_lz_util_shared_account_id_get()
#
#  Returns:
#	str - account_id
#
#  Environment:	 ACTIVE
#>
######################################################################
p6_lz_util_shared_account_id_get() {

  local account_id=$(aws organizations list-accounts --query "Accounts[?Status=='ACTIVE' && Name=='p6m7g8-shared'].Id" --output text)

  p6_return_str "$account_id"
}

######################################################################
#<
#
# Function: str account_id = p6_lz_util_prod_account_id_get()
#
#  Returns:
#	str - account_id
#
#  Environment:	 ACTIVE
#>
######################################################################
p6_lz_util_prod_account_id_get() {

  local account_id=$(aws organizations list-accounts --query "Accounts[?Status=='ACTIVE' && Name=='p6m7g8-prod'].Id" --output text)

  p6_return_str "$account_id"
}

######################################################################
#<
#
# Function: str organization_id = p6_lz_util_organization_id_get()
#
#  Returns:
#	str - organization_id
#
#>
######################################################################
p6_lz_util_organization_id_get() {

  local organization_id=$(aws organizations describe-organization --query "Organization.Id" --output text)

  p6_return_str "$organization_id"
}

######################################################################
#<
#
# Function: p6_lz_main()
#
#>
######################################################################
p6_lz_main "$@"
